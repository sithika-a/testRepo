;
var handle = (function() {
    var b = util.getBrowserWindow();
   

    function getAvailableEvents() {
        return ['close', 'closed', 'loaded', 'focus', 'blur', 'minimize', 'restore', 'maximize', 'unmaximize', 'move', 'resize', 'enter-fullscreen', 'leave-fullscreen', 'new-win-policy'];
    }
    function isEventAvailable(eventType) {
        return getAvailableEvents().indexOf(eventType) !== -1
    }
    return {
        create: function(url, options) {
             var instance;
            var defaults = {
                show: true,
                'web-preferences': { preload: '/Users/sithika/Desktop/widgetPreload.js' }
            }
            if (url) {
                options = options ? jQuery.extend(defaults, options) : defaults
                instance = new b(options);
                instance.loadURL(url);
                instance.on('closed', function() {
                    console.log('Browser window is closed...., deferencing property for garbage collection.');
                    instance = null;
                });
            }
            return {
                execute: function(command) {
                    if (instance && instance[command]) {
                        var _instance;

                        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                            args[_key - 1] = arguments[_key];
                        }

                        return (_instance = instance)[command].apply(_instance, args);
                    }
                    if (instance == null)
                        throw new Error('Window is destroyed or not created yet');
                    else throw new Error('Issue with coding');
                },
                addListeners: function(eventType, cb) {

                    if (instance && eventType && cb && isEventAvailable(eventType)) {
                        /**
                        *
                        * We have to register the event, on event callback fire pass the respective
                          info to the frame which loaded it.
                        *
                        **/
                        instance.on(eventType, cb);
                    }
                }
            }
        }
    }
})();